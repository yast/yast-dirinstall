/**
 * Module:	dirinstall_options.ycp
 *
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * Purpose:	Ask the user for various options for dir install.
 * $Id$
 */

{
    textdomain "dirinstall";

    import "DirInstall";
    import "Installation";
    import "Wizard";
    import "Popup";
    import "Label";
    import "Profile";
    import "AutoinstSoftware";
    import "Report";

    // screen title for installation into directory options
    string title = _("Directory Install Options");

    // build and show dialog

    Wizard::OpenAcceptDialog ();

    term contents = `HVSquash(
			      `VBox(
						// text entry
				    `Left(`TextEntry(`id(`target), _("&Root Directory (not \"/\"):"), DirInstall::GetTarget())),
						// check box
                                    `Left(`CheckBox(`id(`suseconfig), _("Run &YaST and SuSEconfig on First Boot"), DirInstall::runme_at_boot)),
				    `Left(`CheckBox(`id(`use_autoyast), `opt (`notify), _("Get Software Selection from AutoYaST Profile"), DirInstall::use_autoyast_software)),
				    `VSquash(
                                        `HBox(
                                                // text entry
                                            `TextEntry(`id(`autoyast), _("&AutoYaST Profile"), DirInstall::autoyast_software),
                                            `VBox(
                                                `VSpacing(),
                                                // push button
                                                `Bottom(`PushButton(`id(`open_profile), Label::BrowseButton ()))
                                                )
                                            )
                                        ),
						// check box
                                    `Left(`CheckBox(`id(`makeimage), `opt(`notify), _("Create Ima&ge"), DirInstall::makeimage)),
						// text entry
                                    `Left(`TextEntry(`id(`imagename), _("Ima&ge Name:"), DirInstall::image_name)),
                                    `VSquash(
                                        `HBox(
						// text entry
                                            `TextEntry(`id(`imagedir), _("&Image Directory:"), DirInstall::image_dir),
                                            `VBox(
                                                `VSpacing(),
						// push button
                                                `Bottom(`PushButton(`id(`open_dir), _("Select &Directory")))
                                                )
                                            )
                                        )
                                  )
            );

    // help text for dirinstall options 1/2
    string help_text = _("<p>Choose a directory to which to install. Depending on the software selection, make sure
enough space is available.</p>
");
    // help text for dirinstall options 2/2
    help_text = help_text + _("<p>Additionally, you can create an archive image of the directory using tar. To create an 
image, specify the name and the location in the respective fields.</p>
");

    Wizard::SetContents (title, contents, help_text, (boolean) WFM::Args(0),
			 (boolean) WFM::Args(1));


    any ret = nil;

    while (true)
    {
        boolean image = (boolean)UI::QueryWidget(`id(`makeimage), `Value);
        if (image)
        {
            UI::ChangeWidget(`id(`imagename) , `Enabled, true);
            UI::ChangeWidget(`id(`imagedir) , `Enabled, true);
            UI::ChangeWidget(`id(`open_dir) , `Enabled, true);
        }
        else
        {
            UI::ChangeWidget(`id(`imagename) , `Enabled, false);
            UI::ChangeWidget(`id(`imagedir) , `Enabled, false);
            UI::ChangeWidget(`id(`open_dir) , `Enabled, false);
        }
	boolean autoyast = (boolean)UI::QueryWidget (`id(`use_autoyast), `Value);
	UI::ChangeWidget (`id(`autoyast), `Enabled, autoyast);
	UI::ChangeWidget (`id(`open_profile), `Enabled, autoyast);
	ret = Wizard::UserInput ();

	if (ret == `abort && Popup::ConfirmAbort (`painless))
	    break;

	if (ret == `cancel || ret == `back)
	    break;
	if (ret == `open_dir)
        {
	    // directory selection header
            any dir = UI::AskForExistingDirectory( DirInstall::image_dir,  _("Select Directory"));
            if (dir != nil)
            {
                UI::ChangeWidget(`id(`imagedir), `Value, (string)dir);
            }
            continue;
        }
	if (ret == `open_profile)
	{
	    string current_file = (string)UI::QueryWidget (`id (`autoyast), `Value);
	    any file = UI::AskForExistingFile (current_file, "*.xml", _("Select AutoYaST Profile"));
            if (file != nil)
            {
                UI::ChangeWidget(`id(`autoyast), `Value, (string)file);
            }
            continue;
	}
	if (ret == `next)
	{
	    string target =(string) UI::QueryWidget (`id(`target), `Value);
	    boolean runme_at_boot = (boolean) UI::QueryWidget (`id(`suseconfig), `Value);
            DirInstall::makeimage = (boolean) UI::QueryWidget (`id(`makeimage), `Value);
            DirInstall::image_name = (string) UI::QueryWidget (`id(`imagename), `Value);
            DirInstall::image_dir = (string) UI::QueryWidget (`id(`imagedir), `Value);
	    string w_autoyast = (string)UI::QueryWidget (`id (`autoyast), `Value);

	    if ((boolean)UI::QueryWidget (`id (`use_autoyast), `Value)
		&& (DirInstall::autoyast_software != w_autoyast
		    || ! DirInstall::use_autoyast_software))
	    {
		if ( Profile::ReadXML( w_autoyast ))
		{
		    // reset the current selection, start from scratch
		    Pkg::PkgReset();

		    map settings = Profile::current["software"]:$[];
		    y2milestone("Read software data: %1", settings);

		    list<string> patterns = settings["patterns"]:[];
		    y2milestone("Installing patterns: %1", patterns);
		    foreach (string pat, patterns, {
			Pkg::ResolvableInstall(pat, `pattern);
		    });

		    list<string> post_patterns = settings["post-patterns"]:[];
		    y2milestone("Installing post-patterns: %1", patterns);
		    foreach (string pat, post_patterns, {
			Pkg::ResolvableInstall(pat, `pattern);
		    });

		    list<string> packages = settings["packages"]:[];

		    string notFound = "";
		    foreach(string pack, packages, {
			if(!Pkg::IsAvailable(pack)) {
			    notFound = notFound + pack + "\n";
			}
		    });

		    if(size(notFound) > 0) {
			y2error("packages not found: %1",notFound);
			// warning text when selecting packages. %1 is a list of package names
			Report::LongError( sformat(_("These packages could not be found in the software repositories:\n%1"), notFound));
		    }

		    string kernel = settings["kernel"]:"";

		    if (kernel != nil && kernel != "")
		    {
			y2milestone("Adding kernel package: %1", kernel);
			packages = add(packages, kernel);
		    }

		    list<string> post_packages = settings["post-packages"]:[];
		    if (size(post_packages) > 0)
		    {
			y2milestone("Merging post-packages: %1", post_packages);
			packages = (list<string>)merge(packages, post_packages);
		    }

		    y2milestone("Selecting packages: %1", packages);
		    Pkg::DoProvide(packages);

		    list<string> taboo_packages = settings["remove-packages"]:[];
		    if (size(taboo_packages) > 0)
		    {
			y2milestone("Taboo packages: %1", taboo_packages);
			foreach (string tp, taboo_packages, {
			    Pkg::PkgTaboo(tp);
			});
		    }

		    y2internal("products after import: %1", Pkg::ResolvableProperties ("", `product, ""));
		}
		else
		{
		    Report::Error (_("Failed to read the AutoYaST profile."));
		    continue;
		}
	    }
	    DirInstall::use_autoyast_software = (boolean)UI::QueryWidget (`id (`use_autoyast), `Value);
	    DirInstall::autoyast_software = w_autoyast;

            if(target == "" || target == "/")
            {
		// popup message
                Popup::Message (_("Specify a root directory. This does not mean /"));
		continue;
	    }

	    DirInstall::SetTarget(target);
            Installation::destdir = target;
	    DirInstall::runme_at_boot = runme_at_boot;

	    break;
	}
    }

    Wizard::CloseDialog ();

    return ret;
}
