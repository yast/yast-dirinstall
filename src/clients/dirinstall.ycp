/**
 * File:	packager/inst_dir/instintodir.ycp
 * Module:	System installation
 * Summary:	Installation into  a directory
 * Authors:	Anas Nashif <nashif@suse.de>
 *
 * $Id$
 *
 */

{
    textdomain "dirinstall";

    import "CommandLine";
    import "PackageCallbacks";

symbol StartDirInstall()
{
    import "Wizard";
    // open the dialog
    Wizard::CreateDialog();
    Wizard::SetDesktopIcon("sw_single");
    Wizard::SetDesktopTitle("dirinstall");
    Wizard::SetContents(_("Initializing..."), `Empty (), "", false, true);

    import "DirInstall";
    import "PackageLock";
    import "Report";
    import "Progress";

    include "dirinstall/ui.ycp";

    DirInstall::SetStarted(false);

    // set YAST_IS_RUNNING to "instsys" to skip some actions in %post scripts (bnc#786837)
    setenv("YAST_IS_RUNNING", "instsys");

    // check whether having the packager for ourselves
    if (! PackageLock::Check ())
	return `abort;


    list<string> stages =
    [
	// progress bar item
	_("Initialize the Software Manager"),
	// progress bar item
	_("Select Software"),
	// progress bar item
	_("Initialize the Target System")
    ];

    list<string> stages2 =
    [
	// progress bar item
	_("Initializing the Software Manager..."),
	// progress bar item
	_("Selecting Software..."),
	// progress bar item
	_("Initializing the Target System...")
    ];

    // progres bar label
    Progress::New (_("Initializing..."), " ", size(stages) - 1,
	    // progres bar label
	    stages, stages2, _("Please wait..."));


    Progress::NextStage();

    // initializa the package manager
    integer old_src = -1;
    integer new_src = -1;

    Pkg::TargetFinish ();
    Pkg::SourceStartManager(true);

    Progress::NextStage();

    list<map<string,any> > prods = Pkg::ResolvableProperties ("", `product, "");
    y2milestone("Found products: %1", prods);

    if (size (prods) == 0)
    {
	// error report
	Report::Error (_("Could not read package information."));
	Wizard::CloseDialog();
	return `abort;
    }

    foreach(map<string,any> prod, prods,
	{
	    // select all products for installation
	    Pkg::ResolvableInstall(prod["name"]:"", `product);
	}
    );

    symbol ret = Run ();

    Progress::NextStage();

    y2milestone ("Sequence returned %1", ret);
    DirInstall::UmountFilesystems ();

    if (DirInstall::GetStarted())
    {
	DirInstall::FinishPackageManager ();
    }

    Wizard::CloseDialog();
    return ret;
}

map cmdline_description = $[
    "id"	: "dirinstall",
    /* Command line help text for the dirinstall module */
    "help"	: _("Installation into Directory"),
    "guihandler"        : StartDirInstall,
];

return CommandLine::Run(cmdline_description);

}
